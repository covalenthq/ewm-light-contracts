[
  "constructor(uint256,address,address,uint256,uint256,uint256,uint256)",
  "event Allocation(address,uint256)",
  "event AllocationPeriodUpdated(uint256,uint256)",
  "event IntegerAllocationUpdated(bool)",
  "event MaxTotalStakeableUpdated(uint256)",
  "event NftControllerUpdated(address)",
  "event NftExpiryTimeUpdated(uint256)",
  "event OwnershipTransferStarted(address indexed,address indexed)",
  "event OwnershipTransferred(address indexed,address indexed)",
  "event Paused(address)",
  "event StakeReleased(address,uint256)",
  "event Unpaused(address)",
  "event WhitelistRootHashUpdated(bytes32)",
  "function acceptOwnership()",
  "function checkWhitelist(address,bytes32[]) view returns (bool)",
  "function cxt() view returns (address)",
  "function endTime() view returns (uint256)",
  "function getMetadata() view returns (address, address, address, uint256, uint256, uint256, uint256, uint256, uint256, bytes32, bool)",
  "function isIntegerAllowance() view returns (bool)",
  "function maxTotalStakeable() view returns (uint256)",
  "function nftController() view returns (address)",
  "function nftExpiryTime() view returns (uint256)",
  "function nftMintAllowance(address) view returns (uint256)",
  "function owner() view returns (address)",
  "function pause()",
  "function paused() view returns (bool)",
  "function pendingOwner() view returns (address)",
  "function releaseNftStake(uint256)",
  "function renounceOwnership()",
  "function setIsIntegerAllocation(bool)",
  "function setNftControllerAddress(address)",
  "function setNftExpiryTime(uint256)",
  "function setWhitelistRootHash(bytes32)",
  "function stakePrice() view returns (uint256)",
  "function startTime() view returns (uint256)",
  "function totalNftToMint(address) view returns (uint256)",
  "function totalStakeReceived() view returns (uint256)",
  "function transferOwnership(address)",
  "function unpause()",
  "function updateAllocationPeriod(uint256,uint256)",
  "function updateMaxTotalStakeable(uint256)",
  "function userStakeAmount(address) view returns (uint256)",
  "function whitelistRootHash() view returns (bytes32)",
  "function whitelistedAllocation(uint256,bytes32[])"
]
